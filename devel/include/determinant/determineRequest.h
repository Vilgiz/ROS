// Generated by gencpp from file determinant/determineRequest.msg
// DO NOT EDIT!


#ifndef DETERMINANT_MESSAGE_DETERMINEREQUEST_H
#define DETERMINANT_MESSAGE_DETERMINEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace determinant
{
template <class ContainerAllocator>
struct determineRequest_
{
  typedef determineRequest_<ContainerAllocator> Type;

  determineRequest_()
    : a_11(0.0)
    , a_12(0.0)
    , a_13(0.0)
    , a_21(0.0)
    , a_22(0.0)
    , a_23(0.0)
    , a_31(0.0)
    , a_32(0.0)
    , a_33(0.0)  {
    }
  determineRequest_(const ContainerAllocator& _alloc)
    : a_11(0.0)
    , a_12(0.0)
    , a_13(0.0)
    , a_21(0.0)
    , a_22(0.0)
    , a_23(0.0)
    , a_31(0.0)
    , a_32(0.0)
    , a_33(0.0)  {
  (void)_alloc;
    }



   typedef float _a_11_type;
  _a_11_type a_11;

   typedef float _a_12_type;
  _a_12_type a_12;

   typedef float _a_13_type;
  _a_13_type a_13;

   typedef float _a_21_type;
  _a_21_type a_21;

   typedef float _a_22_type;
  _a_22_type a_22;

   typedef float _a_23_type;
  _a_23_type a_23;

   typedef float _a_31_type;
  _a_31_type a_31;

   typedef float _a_32_type;
  _a_32_type a_32;

   typedef float _a_33_type;
  _a_33_type a_33;





  typedef boost::shared_ptr< ::determinant::determineRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::determinant::determineRequest_<ContainerAllocator> const> ConstPtr;

}; // struct determineRequest_

typedef ::determinant::determineRequest_<std::allocator<void> > determineRequest;

typedef boost::shared_ptr< ::determinant::determineRequest > determineRequestPtr;
typedef boost::shared_ptr< ::determinant::determineRequest const> determineRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::determinant::determineRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::determinant::determineRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::determinant::determineRequest_<ContainerAllocator1> & lhs, const ::determinant::determineRequest_<ContainerAllocator2> & rhs)
{
  return lhs.a_11 == rhs.a_11 &&
    lhs.a_12 == rhs.a_12 &&
    lhs.a_13 == rhs.a_13 &&
    lhs.a_21 == rhs.a_21 &&
    lhs.a_22 == rhs.a_22 &&
    lhs.a_23 == rhs.a_23 &&
    lhs.a_31 == rhs.a_31 &&
    lhs.a_32 == rhs.a_32 &&
    lhs.a_33 == rhs.a_33;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::determinant::determineRequest_<ContainerAllocator1> & lhs, const ::determinant::determineRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace determinant

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::determinant::determineRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::determinant::determineRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::determinant::determineRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::determinant::determineRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::determinant::determineRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::determinant::determineRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::determinant::determineRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4378496a759cf57abb30d57560bdbc8a";
  }

  static const char* value(const ::determinant::determineRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4378496a759cf57aULL;
  static const uint64_t static_value2 = 0xbb30d57560bdbc8aULL;
};

template<class ContainerAllocator>
struct DataType< ::determinant::determineRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "determinant/determineRequest";
  }

  static const char* value(const ::determinant::determineRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::determinant::determineRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 a_11\n"
"float32 a_12\n"
"float32 a_13\n"
"float32 a_21\n"
"float32 a_22\n"
"float32 a_23\n"
"float32 a_31\n"
"float32 a_32\n"
"float32 a_33\n"
;
  }

  static const char* value(const ::determinant::determineRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::determinant::determineRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.a_11);
      stream.next(m.a_12);
      stream.next(m.a_13);
      stream.next(m.a_21);
      stream.next(m.a_22);
      stream.next(m.a_23);
      stream.next(m.a_31);
      stream.next(m.a_32);
      stream.next(m.a_33);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct determineRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::determinant::determineRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::determinant::determineRequest_<ContainerAllocator>& v)
  {
    s << indent << "a_11: ";
    Printer<float>::stream(s, indent + "  ", v.a_11);
    s << indent << "a_12: ";
    Printer<float>::stream(s, indent + "  ", v.a_12);
    s << indent << "a_13: ";
    Printer<float>::stream(s, indent + "  ", v.a_13);
    s << indent << "a_21: ";
    Printer<float>::stream(s, indent + "  ", v.a_21);
    s << indent << "a_22: ";
    Printer<float>::stream(s, indent + "  ", v.a_22);
    s << indent << "a_23: ";
    Printer<float>::stream(s, indent + "  ", v.a_23);
    s << indent << "a_31: ";
    Printer<float>::stream(s, indent + "  ", v.a_31);
    s << indent << "a_32: ";
    Printer<float>::stream(s, indent + "  ", v.a_32);
    s << indent << "a_33: ";
    Printer<float>::stream(s, indent + "  ", v.a_33);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DETERMINANT_MESSAGE_DETERMINEREQUEST_H
